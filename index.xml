<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ACMI</title><link>/</link><description>Recent content on ACMI</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Download</title><link>/installer/usage/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installer/usage/download/</guid><description>Download the latest release to somewhere convenient on your computer (put it with your packing scripts if you&amp;rsquo;re using them).
ACMI won't update itself at this time. Make sure to check [releases](https://github.com/agc93/acmi/releases) regularly for new updates.</description></item><item><title>Download</title><link>/packer/usage/download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/usage/download/</guid><description>Download the latest release to somewhere convenient on your computer. The same release archive will include both ACMI (acmi.exe) and ACMI Packer (acmi-pack.exe).
ACMI won't update itself at this time. Make sure to check [releases](https://github.com/agc93/acmi/releases) regularly for new updates.</description></item><item><title>Usage</title><link>/installer/usage/usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installer/usage/usage/</guid><description>If your mods are in your current directory, just run acmi.exe build to build the installer files, or you can pass a specific directory like acmi.exe build D:/Mods/MyAwesomeSkinPack if it&amp;rsquo;s not in the current directory. You can also just drag-and-drop your mod folder onto the acmi.exe file (see the Walkthrough below) to immediately build installer files for that directory.
If it completes successfully, you should see a new fomod directory in your mod files.</description></item><item><title>Usage</title><link>/packer/usage/usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/usage/usage/</guid><description>In short, the easiest way to build your PAK files is to drag-and-drop the folder containing all your cooked files onto acmi-pack.exe.
Preparing your cooked files Once you have your cooked files (should be a set of files like fa27_05_D.uasset and so forth), drop them into an empty folder.
Aircraft skin files (including diffuses, instance files and MREC files) can simply be left as-is, they don&amp;rsquo;t need to be put into their own folder structure.</description></item><item><title>Required Paths</title><link>/packer/usage/paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/usage/paths/</guid><description>The advantage to using ACMI&amp;rsquo;s detection logic is that you often won&amp;rsquo;t need to recreate the whole Nimbus/... folder structure to pack your files: it will do that automatically. However, because PA can&amp;rsquo;t name shit to save their lives, some file types still need at least some of the path to be recreated to pack properly.
Type Top Directory Example Path Skins N/A .</description></item><item><title>Alternative Files</title><link>/packer/advanced/variants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/advanced/variants/</guid><description>Since ACMI Packer doesn&amp;rsquo;t need to set up the full folder structure, it&amp;rsquo;s a bit easier to do variations of the same files.
Walkthrough: Skins Let&amp;rsquo;s take the example of two variants of a skin for the same slot: an XFA-27 skin in Slot 7. When you cooked your files, you will have produced some files that you can copy into a folder like this:
C:/Mods/XFASkin ├── Standard Version │ ├── fa27_06_D.</description></item><item><title>Images</title><link>/installer/extras/images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installer/extras/images/</guid><description>We&amp;rsquo;ll try our best to find a suitable image for the installer as a whole. This will be shown on the first page of the installer and for any steps without their own images. If there&amp;rsquo;s only one .png/.jpg in the root folder, we&amp;rsquo;ll use that. If there&amp;rsquo;s more than one, we&amp;rsquo;ll use the first one we find with &amp;ldquo;preview&amp;rdquo; in the name.
You can also have images for your individual skin files!</description></item><item><title>Multi-Skin Files</title><link>/installer/extras/merged/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installer/extras/merged/</guid><description>If your mod directory includes .pak files with more than one skin in them (such as merged NPC files), include the exact string MULTI anywhere in the file name. This tells ACMI to scan a much larger chunk of the file to find skins and include any it finds, not just the first one.
This can slow down the build process quite a bit if you have lots of large merged files, but your installer will be misleading if you don't.</description></item><item><title>Normals and MRECs</title><link>/packer/advanced/mrecs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/advanced/mrecs/</guid><description>When ACMI Packer starts packing your files, it will actually read any Instance files (aka *_Inst.uasset) it finds and automatically determine the paths for MRECs and Normal files. Since ACMI Packer doesn&amp;rsquo;t need to set up the full folder structure, it&amp;rsquo;s a bit easier to do variations of the same files.
That means that in general, you can just dump all your cooked files and any relevant instance files in the same folder, like so:</description></item><item><title>Unsupported Files</title><link>/packer/advanced/unsupported/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/advanced/unsupported/</guid><description>While ACMI Packer works best with skins and other ACMI-supported files (like radio portraits or canopies), it should still work just fine for other mods as well. Just create the full Nimbus/Content/.../... folder structure for your cooked file like you usually would and run the packer. It should identify the files in their folder and recreate the folder structure from the build folder in the resulting PAK file.
This is much less tested than the supported types, so please let me know if you run into problems using this method.</description></item></channel></rss>