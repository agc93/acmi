<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced on ACMI</title><link>/packer/advanced/</link><description>Recent content in Advanced on ACMI</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="/packer/advanced/index.xml" rel="self" type="application/rss+xml"/><item><title>Alternative Files</title><link>/packer/advanced/variants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/advanced/variants/</guid><description>Since ACMI Packer doesn&amp;rsquo;t need to set up the full folder structure, it&amp;rsquo;s a bit easier to do variations of the same files.
Walkthrough: Skins Let&amp;rsquo;s take the example of two variants of a skin for the same slot: an XFA-27 skin in Slot 7. When you cooked your files, you will have produced some files that you can copy into a folder like this:
C:/Mods/XFASkin ├── Standard Version │ ├── fa27_06_D.</description></item><item><title>Normals and MRECs</title><link>/packer/advanced/mrecs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/advanced/mrecs/</guid><description>When ACMI Packer starts packing your files, it will actually read any Instance files (aka *_Inst.uasset) it finds and automatically determine the paths for MRECs and Normal files. ACMI Packer will set up any extra paths (like the ex/ folder) for you depending on what the Instance file uses: just make sure the cooked asset is named right.
That means that in general, you can just dump all your cooked files and any relevant instance files in the same folder, like so:</description></item><item><title>Unsupported Files</title><link>/packer/advanced/unsupported/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/advanced/unsupported/</guid><description>While ACMI Packer works best with skins and other ACMI-supported files (like radio portraits or canopies), it should still work just fine for other mods as well. Just create the full Nimbus/Content/.../... folder structure for your cooked file like you usually would and run the packer. It should identify the files in their folder and recreate the folder structure from the build folder in the resulting PAK file.
This is much less tested than the supported types, so please let me know if you run into problems using this method.</description></item></channel></rss>