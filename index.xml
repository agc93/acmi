<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ACMI</title><link>/</link><description>Recent content on ACMI</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Required Paths</title><link>/packer/usage/paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/usage/paths/</guid><description>The advantage to using ACMI&amp;rsquo;s detection logic is that you often won&amp;rsquo;t need to recreate the whole Nimbus/... folder structure to pack your files: it will do that automatically. However, because PA can&amp;rsquo;t name shit to save their lives, some file types still need at least some of the path to be recreated to pack properly.
Type Top Directory Example Path Skins N/A .</description></item><item><title>Alternative Files</title><link>/packer/advanced/variants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/advanced/variants/</guid><description>Since ACMI Packer doesn&amp;rsquo;t need to set up the full folder structure, it&amp;rsquo;s a bit easier to do variations of the same files.
Walkthrough: Skins Let&amp;rsquo;s take the example of two variants of a skin for the same slot: an XFA-27 skin in Slot 7. When you cooked your files, you will have produced some files that you can copy into a folder like this:
C:/Mods/XFASkin ├── Standard Version │ ├── fa27_06_D.</description></item><item><title>Images</title><link>/installer/extras/images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installer/extras/images/</guid><description>We&amp;rsquo;ll try our best to find a suitable image for the installer as a whole. This will be shown on the first page of the installer and for any steps without their own images. If there&amp;rsquo;s only one .png/.jpg in the root folder, we&amp;rsquo;ll use that. If there&amp;rsquo;s more than one, we&amp;rsquo;ll use the first one we find with &amp;ldquo;preview&amp;rdquo; in the name.
You can also have images for your individual skin files!</description></item><item><title>Multi-Skin Files</title><link>/installer/extras/merged/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installer/extras/merged/</guid><description>If your mod directory includes .pak files with more than one skin in them (such as merged NPC files), include the exact string MULTI anywhere in the file name. This tells ACMI to scan a much larger chunk of the file to find skins and include any it finds, not just the first one.
This can slow down the build process quite a bit if you have lots of large merged files, but your installer will be misleading if you don't.</description></item><item><title>Normals and MRECs</title><link>/packer/advanced/mrecs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/advanced/mrecs/</guid><description>When ACMI Packer starts packing your files, it will actually read any Instance files (aka *_Inst.uasset) it finds and automatically determine the paths for MRECs and Normal files. ACMI Packer will set up any extra paths (like the ex/ folder) for you depending on what the Instance file uses: just make sure the cooked asset is named right.
That means that in general, you can just dump all your cooked files and any relevant instance files in the same folder, like so:</description></item><item><title>Recooking Assets</title><link>/packer/advanced/recook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/advanced/recook/</guid><description>This is highly experimental functionality! It also only supports aircraft skins. If you&amp;rsquo;ve already cooked your skin&amp;rsquo;s assets for one slot, ACMI can &amp;ldquo;recook&amp;rdquo; your files for different slots without having to duplicate and cook them all in UE4.
Once you have all your cooked assets for one slot, you should have files like the below:
C:/Mods/XFASkin ├── fa27_00_D.uasset ├── fa27_00_D.uexp ├── fa27_00_Inst.uasset ├── fa27_00_Inst.uexp ├── fa27_00_MREC.uasset └── fa27_00_MREC.uexp Next, you must put any instance files for slots you want to use in the folder as well.</description></item><item><title>Special Files</title><link>/installer/extras/special/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/installer/extras/special/</guid><description>There&amp;rsquo;s a couple of things you can also do to tweak how ACMI picks up your files and includes them in an installer.
Lightweight Packing If the mod has been packed using Cherry&amp;rsquo;s &amp;ldquo;lightweight&amp;rdquo; packing method, the individual slot files will have nothing but an instance file in them so ACMI won&amp;rsquo;t detect them as a &amp;ldquo;real&amp;rdquo; skin file. If you include (LIGHT) or (LW) somewhere in the file name, ACMI will instead detect those instance files and sort them into planes and slots correctly.</description></item><item><title>Unsupported Files</title><link>/packer/advanced/unsupported/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/packer/advanced/unsupported/</guid><description>While ACMI Packer works best with skins and other ACMI-supported files (like radio portraits or canopies), it should still work just fine for other mods as well. Just create the full Nimbus/Content/.../... folder structure for your cooked file like you usually would and run the packer. It should identify the files in their folder and recreate the folder structure from the build folder in the resulting PAK file.
This is much less tested than the supported types, so please let me know if you run into problems using this method.</description></item></channel></rss>