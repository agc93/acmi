# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: ACMI CI Build

on:
  push:
    branches: [ master ]
    paths-ignore:
      - "docs/**"
      - ".github/workflows/docs.yml"
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - "docs/**"
      - ".github/workflows/docs.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
      with:
        fetch-depth: 0
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - name: Run the Cake script
      uses: cake-build/cake-action@v1
      with:
        target: Publish
        cake-bootstrap: true
    - uses: actions/upload-artifact@v1
      name: Upload Artifacts
      with:
        name: acmi-cli
        path: dist/archive/
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        body: |
          Check out all the details at [acmi.modding.app](https://acmi.modding.app) (including the [changelog](https://acmi.modding.app/#changelog))
          
          Download and unpack the archive for your system (Windows/Linux) from below.
        files: |
          ./dist/archive/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  nexus:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - name: Restore Tools
      shell: bash
      run: |
          dotnet tool install NexusUploader
    - uses: actions/download-artifact@v1
      with:
        name: acmi-cli
        path: assets
    - name: Set version output
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/v}
    - name: Validate unex config
      shell: bash
      run: |
        dotnet unex check -c
      env:
        UNEX_APIKEY: ${{ secrets.NEXUS_TOKEN }}
        UNEX_COOKIES: ${{ secrets.NEXUS_COOKIES }}
        UNEX_DEBUG: true
    - name: Run Nexus uploader
      shell: bash
      run: |
        dotnet unex upload 787 ./assets/acmi-win-x64.zip -v ${{ steps.vars.outputs.tag }}
      env:
        UNEX_APIKEY: ${{ secrets.NEXUS_TOKEN }}
        UNEX_COOKIES: ${{ secrets.NEXUS_COOKIES }}
        UNEX_DEBUG: true